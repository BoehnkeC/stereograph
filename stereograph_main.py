# -*- coding: utf-8 -*-
"""
/***************************************************************************
 StereographDockWidget
                                 A QGIS plugin
 This plugin plots structural geological data.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-04-12
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Christian BÃ¶hnke
        email                : christian@home-boehnke.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sys
from pathlib import Path

from qgis.PyQt import uic
from PyQt5 import QtCore, QtGui, QtWidgets
from qgis.PyQt.QtCore import pyqtSignal
from PyQt5.QtCore import Qt
from qgis.core import QgsProject, QgsMapLayerType, QgsFeatureRequest
from .options import Types, TypesIndices, FormatsIndices, Formats

# import matplotlibs backend for plotting in PyQT5
# see https://www.geeksforgeeks.org/how-to-embed-matplotlib-graph-in-pyqt5/
from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar

from copy import deepcopy

from .stereograph_input import StereoGraphInputWidget

# from stereograph_plot_settings import StereoGraphPltSettingsWidget

# APSG library by Ondro Lexa: https://github.com/ondrolexa/apsg
try:
    from apsg import *

except ImportError:
    mod_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "mod", "apsg-0.7.0-py2.py3-none-any.whl")
    sys.path.append(mod_path)
    from apsg import *

FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), "stereograph_gui.ui")
)


class StereographDockWidget(QtWidgets.QDockWidget, FORM_CLASS):
    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(StereographDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        #self.stereonet = StereoNet()
        self.layers = Layers()
        self.removable_layer = None

        # this is the Canvas Widget that
        # displays the 'figure'it takes the
        # 'figure' instance as a parameter to __init__
        #self.canvas = FigureCanvas(self.stereonet.fig)

        # this is the Navigation widget
        # it takes the Canvas widget and a parent
        #self.toolbar = NavigationToolbar(self.canvas, self)

        # adding tool bar to the layout
        #self.plot_layout.addWidget(self.toolbar)

        # adding canvas to the layout
        #self.plot_layout.addWidget(self.canvas)

        self.survey_layers()  # get layers loaded in QGIS
        self.insert_datasets()  # insert layers in dataset combobox
        self.insert_types()

        # self.cmb_set.currentIndexChanged.connect(self.insert_datasets)

    def survey_layers(self):
        for layer in QgsProject.instance().mapLayers().items():
            # layer is a tuple, e.g. ('lines_dfb84f76_7835_4663_8da0_d43d8c1620f7', <QgsMapLayer: 'lines' (ogr)>)
            if layer[1].type() == QgsMapLayerType.VectorLayer:
                self.layers.add_layer(Layer(layer[1]))

    def insert_datasets(self):
        self.cmb_set.clear()

        if len(self.layers.layer_list) > 0:
            self.cmb_set.addItems([layer.name for layer in self.layers.layer_list])

    def insert_types(self):
        self.cmb_type.clear()
        self.cmb_type.addItems([_type.value for _type in Types])

        self.fill_types_combobox()  # nothing selected yet, fill formats with dummy entry

        self.cmb_type.currentIndexChanged.connect(self.type_index_changed)

    def type_index_changed(self):
        self.fill_types_combobox()  # fill formats based on type selection

    def fill_types_combobox(self):
        self.cmb_format.clear()

        if self.cmb_type.currentIndex() == TypesIndices.dummy:
            self.cmb_format.addItem("Please select dataset type.")

        elif self.cmb_type.currentIndex() == TypesIndices.lines:
            self.cmb_format.addItems([_line.value for _line in Formats.Lines])

        elif self.cmb_type.currentIndex() == TypesIndices.planes:
            self.cmb_format.addItems([_plane.value for _plane in Formats.Planes])

        else:
            raise AttributeError("The selected type and format and not implemented.")


class Layers:
    def __init__(self):
        self.layer_list = []

    def add_layer(self, layer):
        self.layer_list.append(layer)

    def remove_layer(self, layer):
        self.layer_list.remove(layer)


class Layer:
    def __init__(self, layer=None):
        #self.layer = QgsProject.instance().mapLayers()[layer.layer_id]
        self.layer_id = layer.id()
        self.layer = layer  # QGIS vlayer
        self.name = layer.name()
        self.row = None
        self.cmb_type = None
        self.cmb_format = None
        self.index_type = 0
        self.index_format = 0
        self.field_0 = None
        self.field_1 = None
        self.index_field_0 = 0
        self.index_field_1 = 0
